#version 460 core
out vec4 FragColor;

struct Material {
   sampler2D diffuse;
   sampler2D specular;
   sampler2D emission;
};

struct Light {
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;

    // Direction of Spotlight
    vec3 direction;
    // Angle of Spotlight cone in radians
    float cutOff;
    float outerCutOff;

    // Attenuation constants
    float constant;
    float linear;
    float quadratic;
};

in vec3 Normal;
in vec3 FragPos;
in vec3 LightPos;
in vec2 TexCoords;

uniform int color;
// uniform vec3 lightColor;
uniform vec3 viewPos;
uniform Light light;
uniform Material material;

void main()
{
    vec3 pureColor = vec3(1.0);

    // // Cubes colored grey (default).
    // if (color == 0)
    //     pureColor = vec3(0.6, 0.6, 0.6);
    // Cubes colored red (if trageted/looked at).
    if (color == 1)
        pureColor = vec3(1.0, 0.5, 0.5);
    // Cubes colored blue (while moving).
    if (color == 2)
        pureColor = vec3(0.5, 0.5, 1.0);

    vec3 ambient = light.ambient * vec3(texture(material.diffuse, TexCoords));
    vec3 emission = 0.25 * vec3(texture(material.emission, TexCoords));

    float distance = length(LightPos - FragPos);
    float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));

    vec3 lightDir = normalize(LightPos - FragPos);
    float theta = dot(lightDir, normalize(-light.direction));
    float epsilon   = light.cutOff - light.outerCutOff;
    float intensity = clamp((theta - light.outerCutOff) / epsilon, 0.0, 1.0);   

    vec3 norm = normalize(Normal);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = light.diffuse * diff * vec3(texture(material.diffuse, TexCoords));

    vec3 viewDir = normalize(viewPos-FragPos);
    vec3 reflectDir = reflect(-lightDir, norm);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 4);
    vec3 specular = light.specular * spec * vec3(texture(material.specular, TexCoords));

    vec3 externalLight = vec3(ambient + diffuse + specular) * attenuation * intensity;
        
    FragColor = vec4(((externalLight + emission) * pureColor), 1.0);
}